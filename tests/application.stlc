(let ((id (Lam (a) (lam ((x a)) x))))
       (id 5))

(let ((id (Lam (a b) (lam ((x a) (f (a -> b))) (f x)))))
       (id 5 (lam ((x int)) (- x 10))))

(let ((id (lam (x) x) (all (t) (t -> t))))
  (((id id) id) id))

;; error: type does not match (snd and 8)
(let ((fst (lam (x y) x)
           (all (a) (a a -> a)))
      (snd (lam (x y) y)
           (all (a) (a a -> a))))
  (fst snd 8))

;; error: unsolved type holes
(let ((ignored (lam (x) (lam (y) y))
               (all (a b) (a -> b -> b))))
   (ignored 8))

(lam ((id (all (r) (r -> r))))
  (((id id) id) id))


;; ok
(let ((ap (lam (x f) (f x))
          (all (a b) (a (a -> b) -> _))))
  (ap 5 (lam ((r int)) (Lam (a) (lam ((t a)) r)))))

;; error: cannot infer what be should be
(let ((ap (lam (x) (lam (f) (f x)))
          (all (a b) (a -> (a -> b) -> _))))
  ((ap 5) (lam ((r int)) (Lam (a) (lam ((t a)) r)))))

;; ok: defer the instantiation of b
(let ((ap (lam (x) (lam (f) (f x)))
          (all (a) (a -> (all (b) ((a -> b) -> b))))))
  ((ap 5) (lam ((r int)) (Lam (a) (lam ((t a)) r)))))
