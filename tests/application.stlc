(let ((id (Lam (a) (lam ((x a)) x))))
       (id 5))

(let ((id (Lam (a b) (lam ((x a) (f (a -> b))) (f x)))))
       (id 5 (lam ((x int)) (- x 10))))

(let ((id (lam (x) x) (all (t) (t -> t))))
  (((id id) id) id))

;; error: type does not match (snd and 8)
(let ((fst (lam (x y) x)
           (all (a) (a a -> a)))
      (snd (lam (x y) y)
           (all (a) (a a -> a))))
  (fst snd 8))

;; error: unsolved type holes
(let ((ignored (lam (x) (lam (y) y))
               (all (a b) (a -> b -> b))))
   (ignored 8))

(lam ((id (all (r) (r -> r))))
  (((id id) id) id))


;; ok
(let ((ap (lam (x f) (f x))
          (all (a b) (a (a -> b) -> _))))
  (ap 5 (lam ((r int)) (Lam (a) (lam ((t a)) r)))))

;; error: cannot infer what be should be
(let ((ap (lam (x) (lam (f) (f x)))
          (all (a b) (a -> (a -> b) -> _))))
  ((ap 5) (lam ((r int)) (Lam (a) (lam ((t a)) r)))))

;; ok: defer the instantiation of b
(let ((ap (lam (x) (lam (f) (f x)))
          (all (a) (a -> (all (b) ((a -> b) -> b))))))
  ((ap 5) (lam ((r int)) (Lam (a) (lam ((t a)) r)))))

;; ok
;; inst_all should handle the indices correctly
;;     m               : ∀ _. (1 → 0) → 0
;;     (lam ((x a)) x) : 1 → 1 at the call-site of m
(Lam (a)
  (lam ((m (all (r) ((a -> r) -> r))))
    (m (lam ((x a)) x))))

;; just more layers
(Lam (a)
  (lam ((m (all (r) ((a -> r) -> r))))
    (Lam (c d)
      (m (lam ((x a)) x)))))

;; ditto; just more type variables
(Lam (a b c)
  (lam ((m (all (r) (((* a b) -> r) -> r))))
    (m (lam ((x (* a b))) x))))

;; using let shouldn't change anything
(Lam (a)
  (let ((id (lam ((x a)) x)))
    (lam ((m (all (r) ((a -> r) -> r))))
      (Lam (c d)
        (m id)))))
(Lam (a)
  (lam ((m (all (r) ((a -> r) -> r))))
    (Lam (c d)
      (let ((id (lam ((x a)) x)))
        (m id)))))
