;; This test is intended to check the implementation of type variable substitution.

;; We try to instantiate ∀ a b. (a * b) → ∀ c. c → (A * b * a)
;; with a = ∀ t. t → A
;;      b = B
;; in the context ∀ A B. A B → _.
;;
;; That is, to be a bit hand wavy and using 'type application'-y notation,
;;   ∀ A B. A B → (∀ a b. (a * b) → ∀ c. c → (A * b * a)) [∀ t. t → A] [B]
;; or more formally
;;   ∀ A B. A B → ((a * b) → ∀ c. c → (A * b * a)) [a := (∀ t. t → A), b := B]
;; The correct answer is
;;   ∀ A B. A B → ((∀ t. t → A) * B) → ∀ c. c → (A * B * (∀ t. t → A))
;;
;; In de Bruijn indices, this is
;;   ∀ _ _. 1 0 → (∀ _ _. (1 * 0) → ∀ _. 0 → (4 * 1 * 2)) [∀ _. 0 → 2] [0]
;; =   {- locally nameless-y open .. not quite though, because that '4'
;;        should've been bound to a string instead of a number         -}
;;   ∀ _ _. 1 0 → ((_a * _b) → ∀ _. 0 → (2 * _b * _a)) [_a := ∀ _. 0 → 2, _b := 0]
;; =              {- substitution.       ^~~ Note: this is changed since "∀ _ _."
;;                                           is removed from the type -}
;;   ∀ _ _. 1 0 → ((∀ _. 0 → 2) * 0) → ∀ _. 0 → (2 * 1 * (∀ _. 0 → 3))
;;                                                   ^~~  ^~~~~~~~~~
;;   {- Note: these are changed since they are under an extra layer of "∀ _." -}

;; check the type of get-u
(Lam (A B)
  (lam ((u A) (w B))
    (let (;; get-u : ∀ t. t → A
          (get-u (Lam (t) (lam ((y t)) u)))
          ;; fst-v : ∀ a b. (a * b) → ∀ c. c → A * b * a
          (fst-v (lam (p)
                   (lam (n)
                     (tup u (prj p 1) (prj p 0))))
                 (all (a b) ((* a b) -> (all (c) (c -> (* A b a)))))))
      get-u)))

;; check the type of fst-v
(Lam (A B)
  (lam ((u A) (w B))
    (let (;; get-u : ∀ t. t → A
          (get-u (Lam (t) (lam ((y t)) u)))
          ;; fst-v : ∀ a b. (a * b) → ∀ c. c → A * b * a
          (fst-v (lam (p)
                   (lam (n)
                     (tup u (prj p 1) (prj p 0))))
                 (all (a b) ((* a b) -> (all (c) (c -> (* A b a)))))))
      fst-v)))

;; check the type of an instantiation of fst-v
(Lam (A B)
  (lam ((u A) (w B))
    (let (;; get-u : ∀ t. t → A
          (get-u (Lam (t) (lam ((y t)) u)))
          ;; fst-v : ∀ a b. (a * b) → ∀ c. c → A * b * a
          (fst-v (lam (p)
                   (lam (n)
                     (tup u (prj p 1) (prj p 0))))
                 (all (a b) ((* a b) -> (all (c) (c -> (* A b a)))))))
      (@ fst-v (all (s) (-> s A)) B))))

;; instantiating c to be int
(Lam (A B)
  (lam ((u A) (w B))
    (let (;; get-u : ∀ t. t → A
          (get-u (Lam (t) (lam ((y t)) u)))
          ;; fst-v : ∀ a b. (a * b) → ∀ c. c → A * b * a
          (fst-v (lam (p)
                   (lam (n)
                     (tup u (prj p 1) (prj p 0))))
                 (all (a b) ((* a b) -> (all (c) (c -> (* A b a)))))))
      (@ ((@ fst-v (all (s) (-> s A)) B)
          (tup get-u w))
         int))))
